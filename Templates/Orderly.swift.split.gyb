// FILE: IndexPosition.swift
/// Option that indices which insertion index to use when multiple
/// possibilities exist (in the case of duplicate matching elements).
public enum IndexPosition {
    /// The least possible index.
    case least
    /// The greatest possible index.
    case greatest
    /// The most efficient index to locate.
    case any
}
%{
    from enum import Enum

    class SortedArrayType(Enum):
        NORMAL     = 1
        DESCRIPTOR = 2
        LAZY_MAP   = 3
        
    globals().update(SortedArrayType.__members__)
}%
% for type in SortedArrayType:
%{
    prefix = {
        NORMAL:     '',
        DESCRIPTOR: 'Descriptor',
        LAZY_MAP:   'LazyMap',
    }[type]
    
    def comparator(id):
        if id == 'self':
            return 'comparator' if type is LAZY_MAP else 'self'
        else:
            return id + 'Comparator' if type is LAZY_MAP else id
                    
    def compare(lhs, op, rhs):
        if type  is not DESCRIPTOR:
            return ' '.join([lhs, op, rhs])
        else:
            def predicate_compare(lhs, op, rhs):
                return {
                    '<':  lambda: 'areIncreasingInOrdering({}, {})'
                                    .format(lhs, rhs),
                    '>':  lambda: predicate_compare(rhs, '<', lhs),
                    '<=': lambda: '!' + predicate_compare(lhs, '>', rhs),
                    '>=': lambda: '!' + predicate_compare(lhs, '<', rhs),
                    '==': lambda: ('!areIncreasingInOrdering({0}, {1}) && ' +
                                   '!areIncreasingInOrdering({1}, {0})')
                                    .format(lhs, rhs),
                }[op]()
            return predicate_compare(lhs, op, rhs)
}%
%{
    seq_arg = {
        NORMAL:     '',
        DESCRIPTOR: 'by areIncreasingInOrdering: @escaping (Iterator.Element, Iterator.Element) -> Bool',
        LAZY_MAP:   'on transform: @escaping (Iterator.Element) -> Comparator'
    }[type]
}%
// FILE: ${prefix}SortedArray.swift
extension Sequence where SubSequence: Sequence, SubSequence.Iterator.Element == Iterator.Element${
    ', Iterator.Element: Comparable' if type is NORMAL else ''
} {
    public func isSorted${'<Comparator: Comparable>' if type is LAZY_MAP else ''}(${seq_arg}) -> Bool {
        % if type is LAZY_MAP: 
        let ${comparator('self')} = lazy.map(transform)
        %end
        for (lhs, rhs) in zip(${comparator('self')}, ${comparator('self')}.dropFirst()) {
            guard ${compare('lhs', '<=', 'rhs')} else { return false }
        }
        return true
    }
    % if type is LAZY_MAP: 
    
    // FIXME: Use `withoutActuallyEscaping` in Swift 3.1
    public func sorted<Comparator: Comparable>(on transform: @escaping (Iterator.Element) -> Comparator) -> [Iterator.Element] {
        // FIXME: Remove type annotation after SR-4509 is resolved.
        return (lazy.map({ (value: $0, comparator: transform($0)) }) as LazyMapSequence)
                    .sorted(by: { (a, b) in a.comparator < b.comparator })
                    .map({ $0.value })
    }
    %end
}

%{    
    call_generics = {
        NORMAL:     '<Element>',
        DESCRIPTOR: '<Element>',
        LAZY_MAP:   '<Element, Comparator>',
    }[type]
}%
public struct ${prefix}SortedArray${{
    NORMAL:     '<Element: Comparable>',
    DESCRIPTOR: '<Element>',
    LAZY_MAP:   '<Element, Comparator: Comparable>',
}[type]} {
    fileprivate var base: [Element]
    % if type is DESCRIPTOR:
    fileprivate let areIncreasingInOrdering: (Element, Element) -> Bool
    % elif type is LAZY_MAP: 
    fileprivate var transform: (Element) -> Comparator
    %end
}

extension ${prefix}SortedArray {
    public struct Slice {
        fileprivate var base: ArraySlice<Element>
        % if type is DESCRIPTOR:
        fileprivate let areIncreasingInOrdering: ((Element, Element) -> Bool)?
        % elif type is LAZY_MAP: 
        fileprivate var transform: ((Element) -> Comparator)?
        %end
    }
}

%{
    decl_arg = {
        NORMAL:     '',
        DESCRIPTOR: 'by areIncreasingInOrdering: @escaping (Element, Element) -> Bool',
        LAZY_MAP:   'on transform: @escaping (Element) -> Comparator'
    }[type]
    
    optional_decl_arg = {
        NORMAL:     '',
        DESCRIPTOR: 'by areIncreasingInOrdering: ((Element, Element) -> Bool)?',
        LAZY_MAP:   'on transform: ((Element) -> Comparator)?'
    }[type]
        
    call_arg = {
        NORMAL:     '',
        DESCRIPTOR: 'by: areIncreasingInOrdering',
        LAZY_MAP:   'on: transform',
    }[type]
    
    def next(arg):
        return ', ' + arg if arg != '' else ''
}%
% for is_slice in [False, True]:
%{
    suffix = '.Slice' if is_slice else ''
    backing = '[Element]' if not is_slice else 'ArraySlice<Element>'
    compare_req_init = is_slice and type is not NORMAL
    compare_init = {
        NORMAL:     None,
        DESCRIPTOR: 'areIncreasingInOrdering',
        LAZY_MAP:   'transform',
    }[type]
    compare_init  = 'guard let {0} = {0} else {{ fatalError("{1}") }}'.format(compare_init,
        'Sorted array type not initialized with necessary predicate.')
}%
extension ${prefix}SortedArray${suffix} {
    % if compare_req_init:
//    public init() {
//        self.init(uncheckedSorted: [])
//    }
    
    fileprivate init(uncheckedSorted base: ${backing}${next(optional_decl_arg)} = nil) {
        self.base = base
        % if type is DESCRIPTOR:
        self.areIncreasingInOrdering = areIncreasingInOrdering
        % elif type is LAZY_MAP: 
        self.transform = transform
        %end
    }
    
    %end
    /// Constructs a `${prefix}SortedArray` assuring that `base` is already sorted,
    /// only performing check during testing.
    public init(uncheckedSorted base: ${backing}${next(decl_arg)}) {
        assert(base.isSorted(${call_arg}))
        self.base = base
        % if type is DESCRIPTOR:
        self.areIncreasingInOrdering = areIncreasingInOrdering
        % elif type is LAZY_MAP: 
        self.transform = transform
        %end
    }
    
    /// Constructs a `${prefix}SortedArray` if `base` is verified to be sorted, otherwise returns `nil`.
    public init?(checkingSorted base: ${backing}${next(decl_arg)}) {
        guard base.isSorted(${call_arg}) else { return nil }
        self.base = base
        % if type is DESCRIPTOR:
        self.areIncreasingInOrdering = areIncreasingInOrdering
        % elif type is LAZY_MAP: 
        self.transform = transform
        %end
    }
    
    // Constructs a `${prefix}SortedArray` by sorting `base`.
    public init(sorting base: ${backing}${next(decl_arg)}) {
        % if not is_slice:
        self.base = base.sorted(${call_arg})
        % else:
        self.base = ArraySlice(base.sorted(${call_arg}))
        %end
        % if type is DESCRIPTOR:
        self.areIncreasingInOrdering = areIncreasingInOrdering
        % elif type is LAZY_MAP: 
        self.transform = transform
        %end
    }
    
    public init(${decl_arg}) {
        self.base = []
        % if type is DESCRIPTOR:
        self.areIncreasingInOrdering = areIncreasingInOrdering
        % elif type is LAZY_MAP: 
        self.transform = transform
        %end
    }
}

% if type is NORMAL: 
extension SortedArray${suffix}: ExpressibleByArrayLiteral {
    public init(arrayLiteral elements: Element...) {
        guard elements.isSorted() else { fatalError("`SortedArray` literal must already be sorted.") }
        % if not is_slice:
        self.base = elements
        % else:
        self.base = ArraySlice(elements)
        %end
    }
}

%end
% if not is_slice:
extension Sequence${' where Iterator.Element: Comparable' if type is NORMAL else ''} {
    func sorted${'<Comparator: Comparable>' if type is LAZY_MAP else ''
    }(${seq_arg}) -> ${prefix}SortedArray<Iterator.Element${', Comparator' if type is LAZY_MAP else ''}> {
        return ${prefix}SortedArray(sorting: Array(self)${next(call_arg)})
    }
}

%end

extension ${prefix}SortedArray${suffix}: BidirectionalCollection {
    public var indices: CountableRange<Int> {
        return base.indices
    }
    
    public func index(after i: Int) -> Int {
        return base.index(after: i)
    }
    
    public func index(before i: Int) -> Int {
        return base.index(before: i)
    }

    public func index(_ i: Int, offsetBy n: Int) -> Int? {
        return base.index(i, offsetBy: n)
    }
    
    public func index(_ i: Int, offsetBy n: Int, limitedBy limit: Int) -> Int? {
        return base.index(i, offsetBy: n, limitedBy: limit)
    }
    
    public var startIndex: Int {
        return base.startIndex
    }
    
    public var endIndex: Int {
        return base.endIndex
    }
    
    public subscript(_ index: Int) -> Element {
        get {
            return base[index]
        }
        set {
            % if compare_req_init:
            ${compare_init}
            %end
            % if type is LAZY_MAP: 
            let ${comparator('newValue')} = transform(newValue)
            %end
            if index - 1 >= base.startIndex {
                let precedingValue = base[index - 1]
                % if type is LAZY_MAP: 
                let ${comparator('precedingValue')} = transform(precedingValue)
                %end
                guard ${compare(comparator('precedingValue'), '<=', 
                                comparator('newValue'))} else {
                    preconditionFailure("Cannot assign \(newValue) in position after \(precedingValue).") 
                }
            }
            if index + 1 < base.endIndex {
                let followingValue = base[index + 1]
                % if type is LAZY_MAP: 
                let ${comparator('followingValue')} = transform(followingValue)
                %end
                guard ${compare(comparator('newValue'), '<=', 
                                comparator('followingValue'))} else {
                    preconditionFailure("Cannot assign \(newValue) in position before \(followingValue).") 
                }
            }
            base[index] = newValue
        }
    }
    
    public subscript(_ range: Range<Int>) -> ${prefix}SortedArray${call_generics}.Slice {
        get {
            return ${prefix}SortedArray.Slice(uncheckedSorted: base[range]${next(call_arg)})
        }
        set {
            % if compare_req_init:
            ${compare_init}
            %end
            
            // Fast path for empty assignment
            guard !newValue.isEmpty else {
                base.removeSubrange(range)
                return
            }
            
            if range.lowerBound - 1 >= base.startIndex, let firstNewValue = newValue.first {
                let precedingValue = base[range.lowerBound - 1]
                % if type is LAZY_MAP: 
                let ${comparator('precedingValue')} = transform(precedingValue)
                let ${comparator('firstNewValue')} = transform(firstNewValue)
                %end
                guard ${compare(comparator('precedingValue'), '<=', 
                                comparator('firstNewValue'))} else {
                    preconditionFailure("Cannot assign \(firstNewValue) in position after \(precedingValue).") 
                }
            }
            if range.upperBound < base.endIndex, let lastNewValue = newValue.last {
                let followingValue = base[range.upperBound]
                % if type is LAZY_MAP: 
                let ${comparator('followingValue')} = transform(followingValue)
                let ${comparator('lastNewValue')} = transform(lastNewValue)
                %end
                guard ${compare(comparator('lastNewValue'), '<=', 
                                comparator('followingValue'))} else {
                    preconditionFailure("Cannot assign \(lastNewValue) in position before \(followingValue).") 
                }
            }
            base[range] = newValue.base
        }
    }
}

//extension ${prefix}SortedArray${suffix}: RangeReplaceableCollection {
//    public mutating func replaceSubrange<C: Collection>(_ subrange: Range<Int>, with newElements: C)
//        where C.Iterator.Element == Iterator.Element {
//        
//    }
//}

extension ${prefix}SortedArray${suffix}: CustomStringConvertible, CustomDebugStringConvertible {
    public var description: String {
        return base.description
    }
    
    public var debugDescription: String {
        // FIXME: Incorrectly `ArraySlice` for `.Slice` variants.
        return base.debugDescription
    }
}

extension ${prefix}SortedArray${suffix} {
    % if type is LAZY_MAP:
    public func insertionIndex(of element: Element, for selection: IndexPosition = .any) -> Int {
        % if compare_req_init and type is LAZY_MAP:
        ${compare_init}
        %end

        return insertionIndex(ofComparator: transform(element), for: selection)
    }
    %end    
    % if type is LAZY_MAP:
    
    public func insertionIndex(ofComparator ${comparator('element')}: Comparator, for selection: IndexPosition = .any) -> Int {
    % else:
    public func insertionIndex(of element: Element, for selection: IndexPosition = .any) -> Int {
    %end
        % if compare_req_init:
        ${compare_init}
        %end
    
        var (lowerBound, upperBound) = (startIndex, endIndex)
        while lowerBound < upperBound {
            let middleBound = (upperBound - lowerBound) / 2 + lowerBound
            let middleElement = self[middleBound]
            % if type is LAZY_MAP: 
            let ${comparator('middleElement')} = transform(middleElement)
            %end
            
            if ${compare(comparator('middleElement'), '<', 
                         comparator('element'))} {
                lowerBound = middleBound + 1
            } else if ${compare(comparator('middleElement'), '>', 
                                comparator('element'))} {
                upperBound = middleBound
            } else {
                switch selection {
                    case .least:    upperBound = middleBound
                    case .greatest: lowerBound = middleBound + 1
                    case .any:      return middleBound
                }
            }
        }
        assert(lowerBound == upperBound)
        return lowerBound
    }
    
    @discardableResult 
    public mutating func insert(_ element: Element, at selection: IndexPosition = .any) -> Int {
        let index = insertionIndex(of: element, for: selection)
        base.insert(element, at: index)
        return index
    }
}

extension ${prefix}SortedArray${suffix} {
    public mutating func insert<S: Sequence>(contentsOf sequence: S) where S.Iterator.Element == Element {
        for element in sequence {
            insert(element)
        }
    }
    % if type is NORMAL: 
    
    public mutating func insert(contentsOf sortedArray: ${prefix}SortedArray${call_generics}${suffix}, at selection: IndexPosition = .any) {
        var index = startIndex
        for element in sortedArray {
            index = self[index..<endIndex].insertionIndex(of: element, for: selection)
            base.insert(element, at: index)
        }
    }
    %end
}

extension ${prefix}SortedArray${suffix} {
    public mutating func insert(_ element: Element, at index: Int) {
        % if compare_req_init:
        ${compare_init}
        %end
        
        % if type is LAZY_MAP: 
        let ${comparator('element')} = transform(element)
        %end
        if index - 1 >= base.startIndex {
            let precedingValue = base[index - 1]
            % if type is LAZY_MAP: 
            let ${comparator('precedingValue')} = transform(precedingValue)
            %end
            guard ${compare(comparator('precedingValue'), '<=', 
                            comparator('element'))} else {
                preconditionFailure("Cannot insert \(element) in position after \(precedingValue).") 
            }
        }
        if index < base.endIndex {
            let followingValue = base[index]
            % if type is LAZY_MAP: 
            let ${comparator('followingValue')} = transform(followingValue)
            %end
            guard ${compare(comparator('element'), '<=', 
                            comparator('followingValue'))} else {
                preconditionFailure("Cannot insert \(element) in position before \(followingValue).") 
            }
        }
        base.insert(element, at: index)
    }
    
    public mutating func append(_ element: Element) {
        % if compare_req_init:
        ${compare_init}
        %end
        
        guard let lastValue = base.last else {
            // Currently empty
            base.append(element)
            return
        }
        % if type is LAZY_MAP: 
        let ${comparator('element')} = transform(element)
        let ${comparator('lastValue')} = transform(lastValue)
        %end
        guard ${compare(comparator('lastValue'), '<=', 
                        comparator('element'))} else {
            preconditionFailure("Cannot append \(element) after \(lastValue).") 
        }
        base.append(element)
    }
}

extension ${prefix}SortedArray${suffix} {
    /// Returns the index where the specified value appears in the specified
    /// position in the collection.
    /// - Complexity: O(log(n)), where n is the length of the base.
    public func index(of element: Element, at selection: IndexPosition = .any) -> Int? {
        % if compare_req_init:
        ${compare_init}
        %end
        
        let potentialIndex = insertionIndex(of: element, for: selection)
        let potentialElement = self[potentialIndex]
        % if type is LAZY_MAP: 
        let ${comparator('element')} = transform(element)
        let ${comparator('potentialElement')} = transform(potentialElement)
        %end
        guard ${compare(comparator('element'), '==', 
                        comparator('potentialElement'))} else { return nil }
        return potentialIndex
    }
    
    /// Returns a Boolean value indicating whether the sequence contains the given element.
    /// - Complexity: O(log(n)), where n is the length of the base.
    public func contains(element: Element) -> Bool {
        return index(of: element) != nil
    }
}

extension ${prefix}SortedArray${suffix} {
    public mutating func popLast() -> Element? {
        return base.popLast()
    }
    
    public mutating func removeAll(keepingCapacity: Bool = false) {
        base.removeAll(keepingCapacity: keepingCapacity)
    }
    
    @discardableResult
    public mutating func remove(at index: Int) -> Element {
        return base.remove(at: index)
    }
    
    public mutating func removeFirst() {
        base.removeFirst()
    }
    
    public mutating func removeFirst(n: Int) {
        base.removeFirst(n)
    }
    
    public mutating func removeLast() {
        base.removeLast()
    }
    
    public mutating func removeSubrange(_ bounds: Range<Int>) {
        base.removeSubrange(bounds)
    }
    
    public mutating func removeSubrange(_ bounds: ClosedRange<Int>) {
        base.removeSubrange(bounds)
    }
    
    public mutating func removeSubrange(_ bounds: CountableRange<Int>) {
        base.removeSubrange(bounds)
    }
    
    public mutating func removeSubrange(_ bounds: CountableClosedRange<Int>) {
        base.removeSubrange(bounds)
    }
    
    public mutating func reserveCapacity(minimumCapacity: Int) {
        base.reserveCapacity(minimumCapacity)
    }
}
% if type is NORMAL: 
// Avoid doing unnecessary work
extension ${prefix}SortedArray${suffix} {
    public func sorted() -> [Element] {
        % if not is_slice:
        return base
        % else:
        return Array(base)
        %end
    }

    public func sorted() -> SortedArray<Element> {
        % if not is_slice:
        return self
        % else:
        return SortedArray(uncheckedSorted: Array(base))
        %end
    }

    public func isSorted() -> Bool {
        return true
    }
}

%end
extension ${prefix}SortedArray${suffix} {
    /// Returns the maximum element of the base.
    /// - Complexity: O(1)
    @warn_unqualified_access public func max() -> Element? {
        return last
    }
    
    /// Returns the minimum element of the base.
    /// - Complexity: O(1)
    @warn_unqualified_access public func min() -> Element? {
        return first
    }
}

%end
extension ${prefix}SortedArray${suffix} {
    /// Replaces element at index with a new element, resorting the base afterwards.
    ///
    /// Note this is more efficient than simply removing and adding since this function
    /// will only shift the elements that actually need to move.
    ///
    /// - Complexity: O(n), where n is the length of the base.
    public mutating func replace(at index: Int, with element: Element) {
        % if compare_req_init:
        ${compare_init}
        %end
            
        // Find most efficient position to insert at
        let oldElement = base[index]
        % if type is LAZY_MAP: 
        let ${comparator('element')} = transform(element)
        let ${comparator('oldElement')} = transform(oldElement)
        %end
        if ${compare(comparator('oldElement'), '<', 
                     comparator('element'))} {
            let newIndex = self[(index + 1)..<base.endIndex].insertionIndex(of: element, for: .least)
            base[index..<(newIndex - 1)] = base[(index + 1)..<newIndex]
            base[newIndex - 1] = element
        } else if ${compare(comparator('oldElement'), '>', 
                            comparator('element'))} {
            let newIndex = self[base.startIndex..<(index + 1)].insertionIndex(of: element, for: .greatest)
            base[(newIndex + 1)..<(index + 1)] = base[newIndex..<index]
            base[newIndex] = element
        } else {
            base[index] = element
        }
    }
}

public func ==${{
    NORMAL:     '<Element: Comparable>',
    DESCRIPTOR: '<Element: Equatable>',
    LAZY_MAP:   '<Element: Equatable, Comparator: Comparable>'
}[type]}(
    lhs: ${prefix}SortedArray${call_generics}${suffix},
    rhs: ${prefix}SortedArray${call_generics}${suffix}
) -> Bool {
    return lhs.base == rhs.base
}
%end